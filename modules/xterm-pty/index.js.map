{"version":3,"file":"index.js","mappings":"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","sources":["webpack://xterm-pty/webpack/universalModuleDefinition","webpack://xterm-pty/./src/eventEmitter.ts","webpack://xterm-pty/./src/index.ts","webpack://xterm-pty/./src/lineDiscipline.ts","webpack://xterm-pty/./src/pty.ts","webpack://xterm-pty/./src/termios.ts","webpack://xterm-pty/./src/ttyServer.ts","webpack://xterm-pty/./src/utils.ts","webpack://xterm-pty/webpack/bootstrap","webpack://xterm-pty/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","type Listener<T> = (arg: T) => void;\nexport type Event<T> = (listener: Listener<T>) => { dispose: () => void };\n\nexport class EventEmitter<T> {\n  private listeners: Listener<T>[] = [];\n\n  get register(): Event<T> {\n    const listeners = this.listeners;\n    return (listener: Listener<T>) => {\n      listeners.push(listener);\n      return {\n        dispose: () => {\n          for (let i = 0; i < listeners.length; i++) {\n            if (listeners[i] === listener) {\n              listeners.splice(i, 1);\n              return;\n            }\n          }\n        },\n      };\n    };\n  }\n\n  public fire(arg: T): void {\n    for (const listener of this.listeners) listener(arg);\n  }\n}\n","export * from \"./lineDiscipline\";\nexport * from \"./termios\";\nexport * from \"./utils\";\nexport * from \"./pty\";\nexport * from \"./ttyServer\";\n","// This module provides LineDiscipline class.\n//\n// It glues the low-level device (e.g., xterm.js) with the high-level process\n// (e.g., JavaScript code and an Emscripten'ed process).\n//\n// It receives an input event from the lower layer (writeFromLower()).\n// Depending on the \"termios\" configuration, it handles some special characters\n// such as Ctrl+C, applies some translations to the input, echos it back to the\n// lower layers, etc. Finally it conveys the input to the upper layer\n// (onWriteToUpper() or onSignalToUpper()).\n//\n// It also receives an output event form the upper layer (writeFromUpper()).\n// Again, it applies some translation (such as replacing NL with CR+NL)\n// depending on termios. And finally it conveys the output to the lower layer\n// (onWriteToLower()).\n//\n//                +-------+\n//                | Upper | (e.g., an Emscripten'ed process)\n//                +-------+\n//                  |   ^\n// writeFromUpper() |   | onWriteToUpper() (and onSignalToUpper())\n//                  V   |\n//           +-----------------+\n//           | Line discipline |\n//           +-----------------+\n//                  |   ^\n// onWriteToLower() |   | writeFromLower()\n//                  V   |\n//                +-------+\n//                | Lower | (e.g., xterm.js)\n//                +-------+\n//\n// References:\n//\n// https://en.wikipedia.org/wiki/Line_discipline\n// https://man7.org/linux/man-pages/man3/termios.3.html\n// https://pubs.opengroup.org/onlinepubs/009695299/basedefs/xbd_chap11.html\n// https://pubs.opengroup.org/onlinepubs/009695299/utilities/stty.html\n// https://github.com/torvalds/linux/blob/master/drivers/tty/n_tty.c\n\nimport {\n  BS,\n  TAB,\n  NL,\n  CR,\n  SP,\n  isalnum,\n  iscntrl,\n  isUtf8ContinuationByte,\n  tolower,\n  toupper,\n  stringToUtf8Bytes,\n} from \"./utils\";\nimport { Signal } from \"./pty\";\nimport { Termios, defaultTermios } from \"./termios\";\nimport { EventEmitter, Event } from \"./eventEmitter\";\n\ntype KeyAction =\n  | \"normal\"\n  | \"VEOF\"\n  | \"VEOL\"\n  | \"VERASE\"\n  | \"VKILL\"\n  | \"VREPRINT\"\n  | \"VWERASE\"\n  | \"VLNEXT\"\n  | \"VSTART\"\n  | \"VSTOP\"\n  | \"VINTR\"\n  | \"VQUIT\"\n  | \"VSUSP\";\n\nexport class LineDiscipline {\n  // callbacks\n  private _onWriteToLower = new EventEmitter<number[]>();\n  readonly onWriteToLower = this._onWriteToLower.register;\n\n  private _onWriteToUpper = new EventEmitter<number[]>();\n  readonly onWriteToUpper = this._onWriteToUpper.register;\n\n  private _onSignalToUpper = new EventEmitter<Signal>();\n  readonly onSignalToUpper = this._onSignalToUpper.register;\n\n  private _onFlowActivated = new EventEmitter<void>();\n  readonly onFlowActivated = this._onFlowActivated.register;\n\n  private _onFlowDeactivated = new EventEmitter<void>();\n  readonly onFlowDeactivated = this._onFlowDeactivated.register;\n\n  // states\n  private T = defaultTermios;\n  private keyActions: KeyAction[] = new Array(256).fill(\"normal\");\n\n  private flowActivated = true; // false after VSTOP (C-s), true after VSTART (C-q)\n  private column = 0; // the column that the cursor is in\n  private baseColumn = 0; // the column that starts the to-upper buffer\n  private vlnext = false; // waiting for the next character after VLNEXT (C-v)\n  private echoprt = false; // erasing with ECHOPRT\n\n  private toLowerBuf: number[] = []; // flushed immediately every call\n  private toUpperBuf: number[] = []; // flushed after NL is input (in ICANON mode)\n\n  constructor() {\n    this.termios = defaultTermios;\n  }\n\n  private activateFlow() {\n    this.flowActivated = true;\n    this._onFlowActivated.fire();\n  }\n\n  private deactivateFlow() {\n    this.flowActivated = false;\n    this._onFlowDeactivated.fire();\n  }\n\n  get flow() {\n    return this.flowActivated;\n  }\n\n  get termios() {\n    return this.T;\n  }\n\n  set termios(T: Termios) {\n    this.T = T;\n\n    const keyActions: KeyAction[] = new Array(256).fill(\"normal\");\n\n    if (T.ICANON_P) {\n      keyActions[T.EOF_V] = \"VEOF\";\n      keyActions[T.EOL_V] = \"VEOL\";\n      keyActions[T.EOL2_V] = \"VEOL\";\n      keyActions[T.ERASE_V] = \"VERASE\";\n      keyActions[T.KILL_V] = \"VKILL\";\n      if (T.IEXTEN_P) {\n        keyActions[T.REPRINT_V] = \"VREPRINT\";\n        keyActions[T.WERASE_V] = \"VWERASE\";\n      }\n    }\n    if (T.IEXTEN_P) {\n      keyActions[T.LNEXT_V] = \"VLNEXT\";\n    }\n    if (T.IXON_P) {\n      keyActions[T.START_V] = \"VSTART\";\n      keyActions[T.STOP_V] = \"VSTOP\";\n    }\n    if (T.ISIG_P) {\n      keyActions[T.INTR_V] = \"VINTR\";\n      keyActions[T.QUIT_V] = \"VQUIT\";\n      keyActions[T.SUSP_V] = \"VSUSP\";\n    }\n    keyActions[0] = \"normal\"; // Ignore any action for NUL character\n\n    this.keyActions = keyActions;\n\n    if (!this.T.IXON_P) {\n      this.activateFlow();\n      this.flushToLower();\n    }\n  }\n\n  private clearToLower() {\n    this.toLowerBuf.length = 0;\n  }\n\n  private flushToLower() {\n    if (this.flowActivated == false) return;\n    this._onWriteToLower.fire(this.toLowerBuf);\n    this.clearToLower();\n  }\n\n  private outputToLower(buf: number[]) {\n    this.toLowerBuf.push(...buf);\n  }\n\n  private clearToUpper() {\n    this.toUpperBuf.length = 0;\n    this.baseColumn = this.column;\n  }\n\n  private flushToUpper() {\n    this._onWriteToUpper.fire(this.toUpperBuf);\n    this.clearToUpper();\n  }\n\n  private outputToUpper(c: number) {\n    this.toUpperBuf.push(c);\n  }\n\n  private outputToLowerWithPostprocess(c: number) {\n    if (this.T.OPOST_P) {\n      switch (c) {\n        case BS:\n          if (this.column > 0) this.column--;\n          this.outputToLower([BS]);\n          break;\n        case TAB: {\n          const spaces = 8 - (this.column % 8);\n          this.column += spaces;\n          this.outputToLower(\n            this.T.TABDLY_XTABS_P ? new Array(spaces).fill(SP) : [TAB]\n          );\n          break;\n        }\n        case NL:\n          if (this.T.ONLCR_P) {\n            this.baseColumn = this.column = 0;\n            this.outputToLower([CR, NL]);\n          } else if (this.T.ONLRET_P) {\n            this.column = 0;\n            this.outputToLower([NL]);\n          } else {\n            this.baseColumn = this.column;\n            this.outputToLower([NL]);\n          }\n          break;\n        case CR:\n          if (this.T.ONOCR_P && this.column == 0) {\n            // nothing printed\n          } else if (this.T.OCRNL_P) {\n            if (this.T.ONLRET_P) this.baseColumn = this.column = 0;\n            this.outputToLower([NL]);\n          } else {\n            this.baseColumn = this.column = 0;\n            this.outputToLower([CR]);\n          }\n          break;\n        default:\n          if (!(this.T.IUTF8_P && isUtf8ContinuationByte(c))) this.column++;\n          this.outputToLower(this.T.OLCUC_P ? [toupper(c)] : [c]);\n          break;\n      }\n    } else {\n      this.outputToLower([c]);\n    }\n  }\n\n  private echoToLower(chars: number | number[], raw?: boolean) {\n    if (typeof chars == \"number\") chars = [chars];\n\n    for (const c of chars) {\n      if (this.T.ECHOCTL_P && iscntrl(c) && c != TAB && !raw) {\n        this.outputToLower([94 /* '^' */, c ^ 0x40]);\n        this.column += 2;\n      } else {\n        this.outputToLowerWithPostprocess(c);\n      }\n    }\n  }\n\n  private inputFromLowerWithPreprocess(c: number) {\n    if (c == CR) {\n      if (this.T.IGNCR_P) return;\n      if (this.T.ICRNL_P) c = NL;\n    } else if (c == NL && this.T.INLCR_P) {\n      c = CR;\n    }\n\n    if (this.T.ICANON_P && c == NL) {\n      // flush the to-upper buffer\n      if (this.T.ECHO_P || this.T.ECHONL_P) {\n        this.echoToLower(NL, true);\n        this.flushToLower();\n      }\n      this.outputToUpper(NL);\n      this.flushToUpper();\n    } else if (this.T.ECHO_P) {\n      this.finishECHOPRT();\n      if (c == NL) {\n        this.echoToLower(NL, true);\n      } else {\n        this.echoToLower(c);\n      }\n      this.flushToLower();\n      this.outputToUpper(c);\n    } else {\n      this.outputToUpper(c);\n    }\n    // writeFromLower will flush the to-upper buffer later\n  }\n\n  private erase(type: \"VERASE\" | \"VWERASE\" | \"VKILL\") {\n    if (this.toUpperBuf.length == 0) return;\n\n    if (type == \"VKILL\") {\n      if (!this.T.ECHO_P) {\n        this.clearToUpper();\n        return;\n      }\n      if (!this.T.ECHOK_P || !this.T.ECHOKE_P || !this.T.ECHOE_P) {\n        this.clearToUpper();\n        this.finishECHOPRT();\n        this.echoToLower(this.T.KILL_V);\n        if (this.T.ECHOK_P) this.echoToLower(NL, true);\n        return;\n      }\n    }\n\n    let alnumsFound = false;\n    for (let idx = this.toUpperBuf.length - 1; idx >= 0; idx--) {\n      const c = this.toUpperBuf[idx];\n      if (this.T.IUTF8_P && isUtf8ContinuationByte(c)) continue;\n\n      if (type == \"VWERASE\") {\n        if (isalnum(c) || c == 0x5f /* '_' */) {\n          alnumsFound = true;\n        } else if (alnumsFound) break;\n      }\n\n      const removedChar = this.toUpperBuf.splice(idx);\n      if (this.T.ECHO_P) {\n        if (this.T.ECHOPRT_P) {\n          this.startECHOPRT();\n          this.echoToLower(removedChar);\n        } else if (type == \"VERASE\" && !this.T.ECHOE_P) {\n          this.echoToLower(this.T.ERASE_V);\n        } else if (c == TAB) {\n          let count = 0;\n          let tabFound = false;\n\n          for (let idx = this.toUpperBuf.length - 1; idx >= 0; idx--) {\n            const c = this.toUpperBuf[idx];\n            if (c == TAB) {\n              tabFound = true;\n              break;\n            } else if (iscntrl(c)) {\n              if (this.T.ECHOCTL_P) count += 2;\n            } else if (this.T.IUTF8_P && isUtf8ContinuationByte(c)) {\n              // ignore\n            } else {\n              count++;\n            }\n          }\n          if (!tabFound) count += this.baseColumn;\n\n          count = 8 - (count % 8);\n          this.outputToLower(new Array(count).fill(BS));\n          this.column = Math.max(0, this.column - count);\n        } else {\n          if (iscntrl(c) && this.T.ECHOCTL_P) {\n            this.echoToLower([BS, SP, BS], true);\n          }\n          if (!iscntrl(c) || this.T.ECHOCTL_P) {\n            // delete '^' of ECHOCTL\n            this.echoToLower([BS, SP, BS], true);\n          }\n        }\n      }\n      if (type == \"VERASE\") break;\n    }\n    if (this.toUpperBuf.length == 0) {\n      this.clearToUpper();\n      if (this.T.ECHO_P) this.finishECHOPRT();\n    }\n  }\n\n  private startECHOPRT() {\n    if (!this.echoprt) {\n      this.echoToLower(92 /* '\\' */, true);\n      this.echoprt = true;\n    }\n  }\n\n  private finishECHOPRT() {\n    if (this.echoprt) {\n      this.echoToLower(47 /* '/' */, true);\n      this.echoprt = false;\n    }\n  }\n\n  private signal(sig: Signal, c: number) {\n    this._onSignalToUpper.fire(sig);\n    if (!this.T.NOFLSH_P) {\n      this.clearToLower();\n      this.clearToUpper();\n    }\n    if (this.T.IXON_P) this.activateFlow();\n    if (this.T.ECHO_P) this.echoToLower(c);\n    this.flushToLower();\n  }\n\n  private checkStartFlow() {\n    if (this.flowActivated == false && this.T.IXON_P && this.T.IXANY_P) {\n      this.activateFlow();\n      this.flushToLower();\n    }\n  }\n\n  private nextLiteral() {\n    this.vlnext = true;\n    if (this.T.ECHO_P) {\n      this.finishECHOPRT();\n      if (this.T.ECHOCTL_P) {\n        this.echoToLower([94 /* '^' */, BS], true);\n        this.flushToLower();\n      }\n    }\n  }\n\n  private reprint() {\n    this.finishECHOPRT();\n    this.echoToLower(this.T.REPRINT_V);\n    this.echoToLower(NL, true);\n    this.echoToLower(this.toUpperBuf);\n  }\n\n  writeFromLower(arg: number[] | string) {\n    const buf = typeof arg == \"string\" ? stringToUtf8Bytes(arg) : arg;\n\n    for (let c of buf) {\n      if (this.T.ISTRIP_P) c &= 0x7f;\n      if (this.T.IUCLC_P && this.T.IEXTEN_P) c = tolower(c);\n\n      const keyAction = this.vlnext ? \"normal\" : this.keyActions[c];\n      this.vlnext = false;\n\n      switch (keyAction) {\n        case \"normal\":\n          this.checkStartFlow();\n          this.inputFromLowerWithPreprocess(c);\n          break;\n        case \"VERASE\":\n        case \"VWERASE\":\n        case \"VKILL\":\n          this.checkStartFlow();\n          this.erase(keyAction);\n          this.flushToLower();\n          break;\n        case \"VEOF\":\n          this.checkStartFlow();\n          this.flushToUpper();\n          break;\n        case \"VEOL\":\n          this.checkStartFlow();\n          if (this.T.ECHO_P) {\n            this.echoToLower(c);\n            this.flushToLower();\n          }\n          this.outputToUpper(c);\n          this.flushToUpper();\n          break;\n        case \"VLNEXT\":\n          this.checkStartFlow();\n          this.nextLiteral();\n          break;\n        case \"VREPRINT\":\n          this.checkStartFlow();\n          this.reprint();\n          this.flushToLower();\n          break;\n        case \"VSTART\":\n          this.activateFlow();\n          this.flushToLower();\n          break;\n        case \"VSTOP\":\n          this.deactivateFlow();\n          break;\n        case \"VINTR\":\n          this.signal(\"SIGINT\", c);\n          break;\n        case \"VQUIT\":\n          this.signal(\"SIGQUIT\", c);\n          break;\n        case \"VSUSP\":\n          this.signal(\"SIGTSTP\", c);\n          break;\n      }\n    }\n\n    if (!this.T.ICANON_P) {\n      this.flushToUpper();\n    }\n  }\n\n  writeFromUpper(arg: number[] | string) {\n    if (this.flowActivated == false) {\n      throw \"Do not write anything during flowStatus is stopped\";\n    }\n\n    const buf = typeof arg == \"string\" ? stringToUtf8Bytes(arg) : arg;\n\n    for (const c of buf) this.outputToLowerWithPostprocess(c);\n    this.flushToLower();\n  }\n}\n\nexport interface LineDiscipline {\n  readonly onWriteToLower: Event<number[]>;\n  readonly onWriteToUpper: Event<number[]>;\n  readonly onSignalToUpper: Event<Signal>;\n  readonly onFlowActivated: Event<void>;\n  readonly onFlowDeactivated: Event<void>;\n  flow: boolean;\n  termios: Termios;\n  writeFromLower: (arg: number[] | string) => void;\n  writeFromUpper: (arg: number[] | string) => void;\n}\n","// This module provides the \"openpty\" function.\n// It returns a master object, which is an addon for xterm.js, and a slave\n// object, which serves as stdin/stdout for a process.\n//\n// Typical usage:\n//\n//   // Start an xterm.js instance\n//   const xterm = new Terminal();\n//\n//   // Create master/slave objects\n//   const { master, slave } = openpty();\n//\n//   // Connect the master object to xterm.js\n//   xterm.loadAddon(ldiscAddon);\n//\n//   // Use slave.write instead of xterm.write\n//   slave.write(\"Hello, world!\\nInput your name:\");\n//\n//   // Use slave.onReadable and slave.read instead of xterm.onData\n//   slave.onReadable(() => {\n//     xterm.write(`Hi, ${ slave.read().trim() }!\\n`);\n//   });\n\nimport { Terminal, ITerminalAddon, IDisposable } from \"xterm\";\nimport { EventEmitter } from \"./eventEmitter\";\nimport { LineDiscipline } from \"./lineDiscipline\";\nimport { Termios } from \"./termios\";\nimport { stringToUtf8Bytes } from \"./utils\";\n\nexport type Signal = \"SIGINT\" | \"SIGQUIT\" | \"SIGTSTP\" | \"SIGWINCH\";\n\nconst bufferLimit = 4096;\n\nclass Master implements ITerminalAddon {\n  private disposables: IDisposable[] = [];\n\n  private _onWrite = new EventEmitter<[Uint8Array, () => void]>();\n  readonly onWrite = this._onWrite.register;\n\n  private fromLdiscToLowerBuffer: number[] = [];\n  private waitingForLower = false; // xterm.js implements buffering\n\n  private notifyWritable;\n  private notifyResize;\n\n  constructor(private ldisc: LineDiscipline, private slave: Slave) {\n    const flushToLower = () => {\n      if (this.fromLdiscToLowerBuffer.length >= 1) {\n        this.waitingForLower = true;\n\n        const buf = new Uint8Array(this.fromLdiscToLowerBuffer.splice(0, 4096));\n\n        if (this.fromLdiscToLowerBuffer.length <= bufferLimit)\n          this.notifyWritable();\n\n        this._onWrite.fire([buf, flushToLower]);\n      } else {\n        this.waitingForLower = false;\n      }\n    };\n\n    this.ldisc.onWriteToLower((buf) => {\n      this.fromLdiscToLowerBuffer.push(...buf);\n      if (!this.waitingForLower) flushToLower();\n    });\n\n    const { notifyWritable, notifyResize } = slave.initFromMaster();\n    this.notifyWritable = notifyWritable;\n    this.notifyResize = notifyResize;\n  }\n\n  activate(xterm: Terminal) {\n    this.onWrite(([buf, callback]) => xterm.write(buf, callback));\n\n    const onData = (str: string) =>\n      this.ldisc.writeFromLower(stringToUtf8Bytes(str));\n\n    this.disposables.push(\n      xterm.onData(onData),\n      xterm.onBinary(onData),\n      xterm.onResize(({ cols, rows }) => this.notifyResize(rows, cols))\n    );\n  }\n\n  dispose(): void {\n    this.disposables.forEach((d) => d.dispose());\n    this.disposables.length = 0;\n  }\n}\n\nexport class Slave {\n  private _onReadable = new EventEmitter<void>();\n  readonly onReadable = this._onReadable.register;\n\n  private _onWritable = new EventEmitter<void>();\n  readonly onWritable = this._onWritable.register;\n\n  private _onSignal = new EventEmitter<Signal>();\n  readonly onSignal = this._onSignal.register;\n\n  private fromLdiscToUpperBuffer: number[] = [];\n  private fromUpperToLdiscBuffer: number[] = [];\n\n  private winsize: [number, number] = [80, 24];\n\n  constructor(private ldisc: LineDiscipline) {\n    this.ldisc.onWriteToUpper((buf) => {\n      this.fromLdiscToUpperBuffer.push(...buf);\n      this._onReadable.fire();\n    });\n\n    this.ldisc.onFlowActivated(() => {\n      if (this.fromUpperToLdiscBuffer.length >= 1) {\n        this.ldisc.writeFromUpper(this.fromUpperToLdiscBuffer);\n        this.fromUpperToLdiscBuffer.length = 0;\n      }\n    });\n\n    this.ldisc.onSignalToUpper((sig) => {\n      this._onSignal.fire(sig);\n    });\n  }\n\n  initFromMaster() {\n    return {\n      notifyWritable: () => this._onWritable.fire(),\n      notifyResize: (rows: number, cols: number) => {\n        this.winsize = [cols, rows];\n        this._onSignal.fire(\"SIGWINCH\");\n      },\n    };\n  }\n\n  get readable() {\n    return this.fromLdiscToUpperBuffer.length >= 1;\n  }\n\n  read(length?: number) {\n    const len =\n      typeof length !== \"undefined\"\n        ? Math.min(this.fromLdiscToUpperBuffer.length, length)\n        : this.fromLdiscToUpperBuffer.length;\n    return this.fromLdiscToUpperBuffer.splice(0, len);\n  }\n\n  get writable() {\n    return this.fromUpperToLdiscBuffer.length <= bufferLimit;\n  }\n\n  write(arg: string | number[]) {\n    const buf = typeof arg == \"string\" ? stringToUtf8Bytes(arg) : arg;\n    this.fromUpperToLdiscBuffer.push(...buf);\n\n    if (this.ldisc.flow) {\n      this.ldisc.writeFromUpper(this.fromUpperToLdiscBuffer);\n      this.fromUpperToLdiscBuffer.length = 0;\n    }\n  }\n\n  ioctl(req: \"TCGETS\"): Termios;\n  ioctl(req: \"TCSETS\", arg: Termios): void;\n  ioctl(req: \"TIOCGWINSZ\"): [number, number];\n  ioctl(req: \"TCGETS\" | \"TCSETS\" | \"TIOCGWINSZ\", arg?: any) {\n    switch (req) {\n      case \"TCGETS\":\n        return this.ldisc.termios.clone();\n      case \"TCSETS\":\n        this.ldisc.termios = arg as Termios;\n        return;\n      case \"TIOCGWINSZ\":\n        return this.winsize;\n    }\n  }\n}\n\nexport const openpty = () => {\n  const ldisc = new LineDiscipline();\n  const slave = new Slave(ldisc);\n  const master = new Master(ldisc, slave);\n  return { master, slave };\n};\n","// This module provides a Termios class for termios struct data.\n//\n// https://man7.org/linux/man-pages/man3/termios.3.html\n\n// c_iflag\nexport const ISTRIP = 0x0020;\nexport const INLCR = 0x0040;\nexport const IGNCR = 0x0080;\nexport const ICRNL = 0x0100;\nexport const IUCLC = 0x0200;\nexport const IXON = 0x0400;\nexport const IXANY = 0x0800;\nexport const IMAXBEL = 0x2000;\nexport const IUTF8 = 0x4000;\n\n// c_oflag\nexport const OPOST = 0x0001;\nexport const OLCUC = 0x0002;\nexport const ONLCR = 0x0004;\nexport const OCRNL = 0x0008;\nexport const ONOCR = 0x0010;\nexport const ONLRET = 0x0020;\nexport const TABDLY = 0x1800;\nexport const XTABS = 0x1800;\n\n// c_lflag\nexport const ISIG = 0x0001;\nexport const ICANON = 0x0002;\nexport const ECHO = 0x0008;\nexport const ECHOE = 0x0010;\nexport const ECHOK = 0x0020;\nexport const ECHONL = 0x0040;\nexport const NOFLSH = 0x0080;\nexport const ECHOCTL = 0x0200;\nexport const ECHOPRT = 0x0400;\nexport const ECHOKE = 0x0800;\nexport const IEXTEN = 0x8000;\n\n// c_cc\nexport const VINTR = 0;\nexport const VQUIT = 1;\nexport const VERASE = 2;\nexport const VKILL = 3;\nexport const VEOF = 4;\nexport const VTIME = 5;\nexport const VMIN = 6;\nexport const VSWTCH = 7;\nexport const VSTART = 8;\nexport const VSTOP = 9;\nexport const VSUSP = 10;\nexport const VEOL = 11;\nexport const VREPRINT = 12;\nexport const VDISCARD = 13;\nexport const VWERASE = 14;\nexport const VLNEXT = 15;\nexport const VEOL2 = 16;\n\nexport class Termios {\n  constructor(\n    readonly iflag: number,\n    readonly oflag: number,\n    readonly cflag: number,\n    readonly lflag: number,\n    readonly cc: number[]\n  ) {}\n\n  readonly ISTRIP_P = (this.iflag & ISTRIP) != 0;\n  readonly INLCR_P = (this.iflag & INLCR) != 0;\n  readonly IGNCR_P = (this.iflag & IGNCR) != 0;\n  readonly ICRNL_P = (this.iflag & ICRNL) != 0;\n  readonly IUCLC_P = (this.iflag & IUCLC) != 0;\n  readonly IXON_P = (this.iflag & IXON) != 0;\n  readonly IXANY_P = (this.iflag & IXANY) != 0;\n  readonly IUTF8_P = (this.iflag & IUTF8) != 0;\n  readonly OPOST_P = (this.oflag & OPOST) != 0;\n  readonly OLCUC_P = (this.oflag & OLCUC) != 0;\n  readonly ONLCR_P = (this.oflag & ONLCR) != 0;\n  readonly OCRNL_P = (this.oflag & OCRNL) != 0;\n  readonly ONOCR_P = (this.oflag & ONOCR) != 0;\n  readonly ONLRET_P = (this.oflag & ONLRET) != 0;\n  readonly TABDLY_XTABS_P = (this.oflag & TABDLY) == XTABS;\n  readonly ISIG_P = (this.lflag & ISIG) != 0;\n  readonly ICANON_P = (this.lflag & ICANON) != 0;\n  readonly ECHO_P = (this.lflag & ECHO) != 0;\n  readonly ECHOE_P = (this.lflag & ECHOE) != 0;\n  readonly ECHOK_P = (this.lflag & ECHOK) != 0;\n  readonly ECHONL_P = (this.lflag & ECHONL) != 0;\n  readonly NOFLSH_P = (this.lflag & NOFLSH) != 0;\n  readonly ECHOCTL_P = (this.lflag & ECHOCTL) != 0;\n  readonly ECHOPRT_P = (this.lflag & ECHOPRT) != 0;\n  readonly ECHOKE_P = (this.lflag & ECHOKE) != 0;\n  readonly IEXTEN_P = (this.lflag & IEXTEN) != 0;\n\n  readonly INTR_V = this.cc[VINTR];\n  readonly QUIT_V = this.cc[VQUIT];\n  readonly ERASE_V = this.cc[VERASE];\n  readonly KILL_V = this.cc[VKILL];\n  readonly EOF_V = this.cc[VEOF];\n  readonly TIME_V = this.cc[VTIME]; // not supported\n  readonly MIN_V = this.cc[VMIN]; // not supported\n  readonly SWTCH_V = this.cc[VSWTCH]; // not supported\n  readonly START_V = this.cc[VSTART];\n  readonly STOP_V = this.cc[VSTOP];\n  readonly SUSP_V = this.cc[VSUSP];\n  readonly EOL_V = this.cc[VEOL];\n  readonly REPRINT_V = this.cc[VREPRINT];\n  readonly DISCARD_V = this.cc[VDISCARD]; // not supported\n  readonly WERASE_V = this.cc[VWERASE];\n  readonly LNEXT_V = this.cc[VLNEXT];\n  readonly EOL2_V = this.cc[VEOL2];\n\n  clone() {\n    return new Termios(\n      this.iflag,\n      this.oflag,\n      this.cflag,\n      this.lflag,\n      this.cc.concat()\n    );\n  }\n}\n\nexport const defaultTermios = new Termios(\n  ICRNL | IXON | IMAXBEL | IUTF8,\n  OPOST | ONLCR,\n  0x00bf, // c_cflag is not supported\n  ISIG | ICANON | ECHO | ECHOE | ECHOK | ECHOCTL | ECHOKE | IEXTEN,\n  [\n    0x03, 0x1c, 0x7f, 0x15, 0x04, 0x00, 0x01, 0x00, 0x11, 0x13, 0x1a, 0x00,\n    0x12, 0x0f, 0x17, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  ]\n);\n\nexport const termiosToData = (termios: Termios) => {\n  const data = [termios.iflag, termios.oflag, termios.cflag, termios.lflag];\n  let word = 0;\n  let offset = 8;\n  for (let i = 0; i < termios.cc.length; i++) {\n    word |= termios.cc[i] << offset;\n    offset += 8;\n    if (offset == 32) {\n      data.push(word);\n      word = 0;\n      offset = 0;\n    }\n  }\n  data.push(word);\n  return data;\n};\n\nexport const dataToTermios = (data: number[]): Termios => {\n  const cc: number[] = [];\n  let ptr = 4;\n  let word = data[ptr++];\n  let offset = 8;\n  for (let i = 0; i < 32; i++) {\n    cc.push((word >> offset) & 0xff);\n    offset += 8;\n    if (offset >= 32) {\n      word = data[ptr++];\n      offset = 0;\n    }\n  }\n  return new Termios(data[0], data[1], data[2], data[3], cc);\n};\n","// This module provides a \"TtyServer\" class.\n//\n// This code runs in the main thread.\n// It accepts TTY requests from TtyClient that works in a Web Worker.\n// The communication is based on Worker.postmessage and SharedArrayBuffer.\n\nimport { Slave } from \"./pty\";\nimport { termiosToData, dataToTermios } from \"./termios\";\n\n// Request types from a emscripten'ed process\nexport type TtyRequest =\n  | { ttyRequestType: \"read\"; length: number }\n  | { ttyRequestType: \"write\"; buf: number[] }\n  | { ttyRequestType: \"input\" }\n  | { ttyRequestType: \"output\"; char: number }\n  | { ttyRequestType: \"poll\"; timeout: number }\n  | { ttyRequestType: \"tcgets\" }\n  | { ttyRequestType: \"tcsets\"; data: number[] }\n  | { ttyRequestType: \"tiocgwinsz\" };\n\ntype State = \"idle\" | \"input\" | \"poll\";\n\n// UI thread side\nexport class TtyServer {\n  private shared = new SharedArrayBuffer(4 + 256);\n  private streamCtrl = new Int32Array(this.shared, 0, 1);\n  private streamData = new Int32Array(this.shared, 4);\n\n  private state: State = \"idle\";\n  private timeoutHandler: NodeJS.Timeout | null = null;\n\n  ack() {\n    Atomics.store(this.streamCtrl, 0, 1);\n    Atomics.notify(this.streamCtrl, 0);\n    this.state = \"idle\";\n  }\n\n  fromWorkerBuf: number[] = [];\n  toWorkerBuf: number[] = [];\n\n  constructor(private slave: Slave) {\n    slave.onWritable(() => {\n      if (this.fromWorkerBuf.length >= 1) this.feedFromWorker();\n    });\n\n    slave.onReadable(() => {\n      this.toWorkerBuf.push(...slave.read());\n\n      switch (this.state) {\n        case \"poll\":\n          this.waitForReadable(0);\n          break;\n        case \"input\":\n          this.feedToWorker(this.toWorkerBuf.length);\n          break;\n      }\n    });\n\n    slave.onSignal((sig) => {\n      console.info(`A signal ${sig} is currently ignored`);\n      // TODO: send a signal to the Emscripten'ed process\n    });\n  }\n\n  feedToWorker(length: number) {\n    if (this.state != \"input\") throw \"worker does not wait for input\";\n    if (length > this.streamData.length - 1)\n      length = this.streamData.length - 1;\n    const buf = this.toWorkerBuf.splice(0, length);\n    this.streamData[0] = buf.length;\n    this.streamData.set(buf, 1);\n    this.ack();\n  }\n\n  feedFromWorker() {\n    if (this.fromWorkerBuf.length == 0) throw \"worker does not wait for output\";\n    if (this.slave.writable) {\n      this.ack();\n      this.slave.write(this.fromWorkerBuf.splice(0));\n    }\n  }\n\n  waitForReadable(timeout: number) {\n    if (this.state != \"poll\") throw \"worker does not wait for poll\";\n\n    if (this.timeoutHandler) {\n      clearTimeout(this.timeoutHandler);\n      this.timeoutHandler = null;\n    }\n\n    if (this.toWorkerBuf.length > 0) {\n      this.streamData[0] = 1; // ready for reading\n      this.ack();\n    } else {\n      if (timeout < 0) {\n        // block indefinitely\n      } else if (timeout > 0) {\n        // block with timeout\n        this.timeoutHandler = setTimeout(\n          () => this.waitForReadable(0),\n          timeout * 1000\n        );\n      } else {\n        this.streamData[0] = 2; // timeout\n        this.ack();\n      }\n    }\n  }\n\n  private stop_: (() => void) | null = null;\n\n  start(worker: Worker, callback?: (ev: MessageEvent<any>) => void) {\n    this.stop();\n    let stop = false;\n    this.stop_ = () => (stop = true);\n\n    worker.onmessage = (ev: MessageEvent<any>) => {\n      const req_ = ev.data;\n\n      if (typeof req_ == \"object\" && req_.ttyRequestType) {\n        if (stop) return;\n\n        const req: TtyRequest = req_;\n\n        //console.debug(req);\n\n        switch (req.ttyRequestType) {\n          case \"read\":\n            this.state = \"input\";\n            if (this.toWorkerBuf.length >= 1) this.feedToWorker(req.length);\n            break;\n          case \"write\":\n            this.fromWorkerBuf.push(...req.buf);\n            this.feedFromWorker();\n            break;\n          case \"poll\":\n            this.state = \"poll\";\n            this.waitForReadable(req.timeout);\n            break;\n          case \"tcgets\":\n            this.streamData.set(termiosToData(this.slave.ioctl(\"TCGETS\")));\n            this.ack();\n            break;\n          case \"tcsets\":\n            this.slave.ioctl(\"TCSETS\", dataToTermios(req.data));\n            this.ack();\n            break;\n          case \"tiocgwinsz\": {\n            const [rows, cols] = this.slave.ioctl(\"TIOCGWINSZ\");\n            this.streamData[0] = rows;\n            this.streamData[1] = cols;\n            this.ack();\n            break;\n          }\n        }\n      } else if (callback) {\n        callback(ev);\n      }\n    };\n\n    // kick the Web Worker\n    worker.postMessage(this.shared);\n  }\n\n  stop() {\n    if (this.stop_) this.stop_();\n  }\n}\n","export const BS = 8;\nexport const TAB = 9;\nexport const NL = 10;\nexport const CR = 13;\nexport const SP = 32;\n\nexport const isalnum = (c: number) =>\n  (0x30 <= c && c <= 0x39) ||\n  (0x41 <= c && c <= 0x5a) ||\n  c == 0x5f ||\n  (0x61 <= c && c <= 0x7a);\nexport const iscntrl = (c: number) =>\n  (0x00 <= c && c <= 0x1f && c != 0x09) || c == 0x7f;\nexport const isUtf8ContinuationByte = (c: number) => (c & 0xc0) == 0x80;\nexport const tolower = (c: number) => (0x41 <= c && c <= 0x5a ? c + 0x20 : c);\nexport const toupper = (c: number) => (0x61 <= c && c <= 0x7a ? c - 0x20 : c);\n\nexport const utf8BytesToString = (buf: number[]): [string, number[]] => {\n  let str = \"\";\n  let i = 0;\n  while (i < buf.length) {\n    const b = buf[i];\n    let cp;\n    if (b < 0x80) {\n      cp = b;\n    } else if ((b & 0xe0) == 0xc0) {\n      if (buf.length <= i + 1) break;\n      cp = (b & 0x1f) << 6;\n      cp |= buf[++i] & 0x3f;\n    } else if ((b & 0xf0) == 0xe0) {\n      if (buf.length <= i + 2) break;\n      cp = (b & 0x0f) << 12;\n      cp |= (buf[++i] & 0x3f) << 6;\n      cp |= buf[++i] & 0x3f;\n    } else if ((b & 0xf8) == 0xf0) {\n      if (buf.length <= i + 3) break;\n      cp = (b & 0x03) << 18;\n      cp |= (buf[++i] & 0x3f) << 12;\n      cp |= (buf[++i] & 0x3f) << 6;\n      cp |= buf[++i] & 0x3f;\n    } else {\n      cp = 0xfffe;\n    }\n    i++;\n    str += String.fromCodePoint(cp);\n  }\n  return [str, buf.slice(i)];\n};\n\nexport const stringToUtf8Bytes = (str: string) => {\n  const bytes: number[] = [];\n  for (let i = 0; i < str.length; ) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const cp = str.codePointAt(i)!;\n    if (cp < 0x80) bytes.push(cp);\n    else if (cp < 0x800) {\n      bytes.push(0xc0 | (cp >> 6));\n      bytes.push(0x80 | (cp & 0x3f));\n    } else if (cp < 0x10000) {\n      bytes.push(0xe0 | (cp >> 12));\n      bytes.push(0x80 | ((cp >> 6) & 0x3f));\n      bytes.push(0x80 | (cp & 0x3f));\n    } else {\n      bytes.push(0xf0 | (cp >> 18));\n      bytes.push(0x80 | ((cp >> 12) & 0x3f));\n      bytes.push(0x80 | ((cp >> 6) & 0x3f));\n      bytes.push(0x80 | (cp & 0x3f));\n    }\n    i += cp >= 0x10000 ? 2 : 1;\n  }\n  return bytes;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(164);\n"],"names":["root","factory","exports","module","define","amd","a","i","self","listeners","this","listener","push","dispose","length","splice","fire","arg","EventEmitter","_onWriteToLower","onWriteToLower","register","_onWriteToUpper","onWriteToUpper","_onSignalToUpper","onSignalToUpper","_onFlowActivated","onFlowActivated","_onFlowDeactivated","onFlowDeactivated","T","defaultTermios","keyActions","Array","fill","flowActivated","column","baseColumn","vlnext","echoprt","toLowerBuf","toUpperBuf","termios","activateFlow","deactivateFlow","ICANON_P","EOF_V","EOL_V","EOL2_V","ERASE_V","KILL_V","IEXTEN_P","REPRINT_V","WERASE_V","LNEXT_V","IXON_P","START_V","STOP_V","ISIG_P","INTR_V","QUIT_V","SUSP_V","flushToLower","clearToLower","outputToLower","buf","clearToUpper","flushToUpper","outputToUpper","c","outputToLowerWithPostprocess","OPOST_P","BS","TAB","spaces","TABDLY_XTABS_P","SP","NL","ONLCR_P","CR","ONLRET_P","ONOCR_P","OCRNL_P","IUTF8_P","isUtf8ContinuationByte","OLCUC_P","toupper","echoToLower","chars","raw","ECHOCTL_P","iscntrl","inputFromLowerWithPreprocess","IGNCR_P","ICRNL_P","INLCR_P","ECHO_P","ECHONL_P","finishECHOPRT","erase","type","ECHOK_P","ECHOKE_P","ECHOE_P","alnumsFound","idx","isalnum","removedChar","ECHOPRT_P","startECHOPRT","count","tabFound","Math","max","signal","sig","NOFLSH_P","checkStartFlow","IXANY_P","nextLiteral","reprint","writeFromLower","stringToUtf8Bytes","ISTRIP_P","IUCLC_P","tolower","keyAction","writeFromUpper","LineDiscipline","ldisc","slave","disposables","_onWrite","onWrite","fromLdiscToLowerBuffer","waitingForLower","Uint8Array","notifyWritable","initFromMaster","notifyResize","activate","xterm","callback","write","onData","str","onBinary","onResize","cols","rows","forEach","d","_onReadable","onReadable","_onWritable","onWritable","_onSignal","onSignal","fromLdiscToUpperBuffer","fromUpperToLdiscBuffer","winsize","read","len","min","flow","ioctl","req","clone","Slave","openpty","master","Master","ISTRIP","INLCR","IGNCR","ICRNL","IUCLC","IXON","IXANY","IMAXBEL","IUTF8","OPOST","OLCUC","ONLCR","OCRNL","ONOCR","ONLRET","TABDLY","XTABS","ISIG","ICANON","ECHO","ECHOE","ECHOK","ECHONL","NOFLSH","ECHOCTL","ECHOPRT","ECHOKE","IEXTEN","VINTR","VQUIT","VERASE","VKILL","VEOF","VTIME","VMIN","VSWTCH","VSTART","VSTOP","VSUSP","VEOL","VREPRINT","VDISCARD","VWERASE","VLNEXT","VEOL2","iflag","oflag","cflag","lflag","cc","TIME_V","MIN_V","SWTCH_V","DISCARD_V","Termios","concat","termiosToData","data","word","offset","dataToTermios","ptr","shared","SharedArrayBuffer","streamCtrl","Int32Array","streamData","state","timeoutHandler","fromWorkerBuf","toWorkerBuf","stop_","feedFromWorker","waitForReadable","feedToWorker","console","info","ack","Atomics","store","notify","set","writable","timeout","clearTimeout","setTimeout","start","worker","stop","onmessage","ev","req_","ttyRequestType","postMessage","TtyServer","utf8BytesToString","b","cp","String","fromCodePoint","slice","bytes","codePointAt","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}